---
import Layout from '../layouts/Layout.astro';

const apiConfigurations = [
	{
		url: 'https://docs.cortex.io/',
		appId: '3ZAQCSL5V0',
		apiKey: '69aa153f53e4a4f9fa490742464716e2',
		indexName: 'cortex'
	},
	{
		url: 'https://airflow.apache.org/docs/apache-airflow/stable/',
		appId: '82VLS1TU5K',
		apiKey: 'bfdc9eff848b16b6167efaa4a84d5e27',
		indexName: 'othersites',
		sitename: 'apacheairflow'
	},
	{
		url: 'https://randombeeper.github.io/JamesDevDocsSrc/',
		appId: '7KX1KKVYQZ',
		apiKey: '11c3cc057560ae8269998fc74e263147',
		indexName: 'randombeeperio'
	},
	{
		url: 'https://randombeeper.github.io/starlight/',
		appId: 'JDT8AI1ORL',
		apiKey: 'ae645a56b5d7c1a7d787027b50abe9d0',
		indexName: 'randombeeperio'
	},
];

const jsonApiConfigurations = JSON.stringify(apiConfigurations);
---


<Layout title="Algolia DocSearch Results">
	<main>
		<h1>Algolia DocSearch Results</h1>
		the other page: <a href="/astrodocs/reacttest">other page</a>.
		<p class="instructions">
			Search:
			<select name="selectedurl" id="selectedurl">
				{
					apiConfigurations.map((config,index) => (
						<option value={index}>{config.url}</option>
					))
				}
			</select>
		</p>
		<div id="docsearch"></div>

		<!-- docsearchjs - I npm installed this to see if I can get it to work that way -->
		<script is:inline src="https://cdn.jsdelivr.net/npm/@docsearch/js@3"/>

		<!-- Inject the data as a hidden JSON string in the HTML -->
		<script is:inline id="api-configurations" type="application/json" set:html={jsonApiConfigurations}/>

		<!-- search -->
		<script is:inline type="text/javascript">
			const apiConfigurations = JSON.parse(document.getElementById('api-configurations').textContent);

			const dropdown = document.getElementById('selectedurl');

			function handleSelectionChange(event) {
				const selectedValue = event.target.value;
				console.log('Selected URL:', selectedValue);

				theFacetFilters = [];
				if( apiConfigurations[selectedValue].sitename ){
					theFacetFilters = ['sitename:' + apiConfigurations[selectedValue].sitename]
				}

				docsearch({
					appId: apiConfigurations[selectedValue].appId,
					apiKey: apiConfigurations[selectedValue].apiKey,
					indexName: apiConfigurations[selectedValue].indexName,
					container: "#docsearch",
					searchParameters: {						
						facetFilters: theFacetFilters,
					},
					debug: false 
				});
			}

			dropdown.addEventListener('change', handleSelectionChange);

			// Manually trigger the change event for the initial selection
			window.addEventListener('load', () => {
				const initialValue = dropdown.value;
				if (initialValue) {
					handleSelectionChange({ target: { value: initialValue } });
				}
			});
		</script>
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>
